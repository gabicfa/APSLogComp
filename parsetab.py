
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABRE_CHAVES ABRE_PAREN ADI ATRI BIGGER CASO DIFER DIV ENQUANTO EQUALS FECHA_CHAVES FECHA_PAREN FUNCAO ID IMPRIMIR LESS MULT NUMERO PONTO_VIRG RETORNAR SCAN SENAO SUB VIRG\n    arnaldo : programa\n    \n    programa : ABRE_CHAVES declaracoes FECHA_CHAVES\n    \n    declaracoes : declaracoes funcao\n                | declaracoes listaAfirm\n                | empty\n    \n    declaracoes_sem_func : declaracoes_sem_func listaAfirm\n                         | empty\n    \n    declaracoes_para_func : declaracoes_para_func listaAfirmFunc\n                          | empty\n    \n    funcao : FUNCAO ID ABRE_PAREN listaVar FECHA_PAREN ABRE_CHAVES declaracoes_para_func FECHA_CHAVES\n    \n    chama : ABRE_PAREN listaVar FECHA_PAREN\n    \n    listaVar : ID\n             | empty\n    \n    listaVar : ID VIRG listaVar\n    \n    listaAfirm : listaAfirm afirmacao\n               | empty\n    \n    listaAfirmFunc : listaAfirmFunc afirmacaoFunc\n                   | empty\n    \n    afirmacao : enquanto\n              | caso\n              | imprimir\n    \n    afirmacaoFunc : afirmacao\n                  | retornar\n    \n    afirmacao : ID chama PONTO_VIRG\n    \n    afirmacao : ID atribui PONTO_VIRG\n    \n    atribui : ATRI ladoDir\n            | ATRI scan\n    \n    scan : SCAN ABRE_PAREN FECHA_PAREN\n    \n    imprimir : IMPRIMIR ABRE_PAREN ladoDir FECHA_PAREN PONTO_VIRG\n    \n    ladoDir : termo ADI termo\n            | termo SUB termo\n            | termo\n    \n    retornar : RETORNAR ABRE_PAREN ladoDir FECHA_PAREN PONTO_VIRG\n    \n    termo : fator\n          | fator MULT fator\n          | fator DIV fator \n    \n    fator : ADI NUMERO\n          | SUB NUMERO\n          | NUMERO\n    \n    fator : ADI ID\n          | SUB ID\n          | ID\n    \n    fator : ABRE_PAREN ladoDir FECHA_PAREN PONTO_VIRG\n    \n    fator : ID chama\n    \n    enquanto : ENQUANTO expressao ABRE_CHAVES declaracoes_sem_func FECHA_CHAVES\n    \n    caso : CASO expressao ABRE_CHAVES declaracoes_sem_func FECHA_CHAVES\n    \n    caso : CASO expressao ABRE_CHAVES declaracoes_sem_func FECHA_CHAVES SENAO ABRE_CHAVES declaracoes_sem_func FECHA_CHAVES\n    \n    expressao : ABRE_PAREN ID BIGGER ladoDir FECHA_PAREN\n              | ABRE_PAREN ID LESS ladoDir FECHA_PAREN\n              | ABRE_PAREN ID EQUALS ladoDir FECHA_PAREN\n              | ABRE_PAREN ID DIFER ladoDir FECHA_PAREN\n     \n    empty : \n    '
    
_lr_action_items = {'ABRE_CHAVES':([0,24,26,70,88,89,90,91,92,],[3,44,46,86,-48,-49,-50,-51,95,]),'$end':([1,2,6,],[0,-1,-2,]),'FECHA_CHAVES':([3,4,5,7,8,10,11,12,13,14,29,30,44,46,62,63,68,78,79,84,85,86,93,94,95,96,97,98,99,100,101,102,104,108,],[-52,6,-5,-3,-4,-16,-15,-19,-20,-21,-24,-25,-52,-52,78,-7,84,-45,-6,-46,-29,-52,96,-9,-52,-10,-8,-18,104,-17,-22,-23,-47,-33,]),'FUNCAO':([3,4,5,7,8,10,11,12,13,14,29,30,78,84,85,96,104,],[-52,9,-5,-3,-4,-16,-15,-19,-20,-21,-24,-25,-45,-46,-29,-10,-47,]),'ID':([3,4,5,7,8,9,10,11,12,13,14,22,23,25,27,28,29,30,37,38,40,44,46,50,51,52,59,60,62,63,64,65,66,67,68,78,79,84,85,86,93,94,95,96,97,98,99,100,101,102,104,105,108,],[-52,-52,-5,-3,15,19,-16,-15,-19,-20,-21,32,43,45,43,32,-24,-25,54,56,43,-52,-52,32,43,43,43,43,-52,-7,43,43,43,43,-52,-45,15,-46,-29,-52,-52,-9,-52,-10,15,-18,-52,-17,-22,-23,-47,43,-33,]),'ENQUANTO':([3,4,5,7,8,10,11,12,13,14,29,30,44,46,62,63,68,78,79,84,85,86,93,94,95,96,97,98,99,100,101,102,104,108,],[-52,-52,-5,-3,16,-16,-15,-19,-20,-21,-24,-25,-52,-52,-52,-7,-52,-45,16,-46,-29,-52,-52,-9,-52,-10,16,-18,-52,-17,-22,-23,-47,-33,]),'CASO':([3,4,5,7,8,10,11,12,13,14,29,30,44,46,62,63,68,78,79,84,85,86,93,94,95,96,97,98,99,100,101,102,104,108,],[-52,-52,-5,-3,17,-16,-15,-19,-20,-21,-24,-25,-52,-52,-52,-7,-52,-45,17,-46,-29,-52,-52,-9,-52,-10,17,-18,-52,-17,-22,-23,-47,-33,]),'IMPRIMIR':([3,4,5,7,8,10,11,12,13,14,29,30,44,46,62,63,68,78,79,84,85,86,93,94,95,96,97,98,99,100,101,102,104,108,],[-52,-52,-5,-3,18,-16,-15,-19,-20,-21,-24,-25,-52,-52,-52,-7,-52,-45,18,-46,-29,-52,-52,-9,-52,-10,18,-18,-52,-17,-22,-23,-47,-33,]),'RETORNAR':([12,13,14,29,30,78,84,85,86,93,94,97,98,100,101,102,104,108,],[-19,-20,-21,-24,-25,-45,-46,-29,-52,-52,-9,103,-18,-17,-22,-23,-47,-33,]),'ABRE_PAREN':([15,16,17,18,19,23,27,39,40,43,51,52,59,60,64,65,66,67,103,105,],[22,25,25,27,28,40,40,57,40,22,40,40,40,40,40,40,40,40,105,40,]),'ATRI':([15,],[23,]),'PONTO_VIRG':([20,21,34,35,36,41,42,43,49,53,54,55,56,61,69,72,73,74,75,76,77,87,107,],[29,30,-26,-27,-32,-34,-39,-42,-11,-37,-40,-38,-41,-44,85,-30,-31,-28,87,-35,-36,-43,108,]),'FECHA_PAREN':([22,28,31,32,33,36,41,42,43,47,48,49,50,53,54,55,56,57,58,61,71,72,73,76,77,80,81,82,83,87,106,],[-52,-52,49,-12,-13,-32,-34,-39,-42,69,70,-11,-52,-37,-40,-38,-41,74,75,-44,-14,-30,-31,-35,-36,88,89,90,91,-43,107,]),'SCAN':([23,],[39,]),'ADI':([23,27,36,40,41,42,43,49,51,52,53,54,55,56,59,60,61,64,65,66,67,76,77,87,105,],[37,37,51,37,-34,-39,-42,-11,37,37,-37,-40,-38,-41,37,37,-44,37,37,37,37,-35,-36,-43,37,]),'SUB':([23,27,36,40,41,42,43,49,51,52,53,54,55,56,59,60,61,64,65,66,67,76,77,87,105,],[38,38,52,38,-34,-39,-42,-11,38,38,-37,-40,-38,-41,38,38,-44,38,38,38,38,-35,-36,-43,38,]),'NUMERO':([23,27,37,38,40,51,52,59,60,64,65,66,67,105,],[42,42,53,55,42,42,42,42,42,42,42,42,42,42,]),'VIRG':([32,],[50,]),'MULT':([41,42,43,49,53,54,55,56,61,87,],[59,-39,-42,-11,-37,-40,-38,-41,-44,-43,]),'DIV':([41,42,43,49,53,54,55,56,61,87,],[60,-39,-42,-11,-37,-40,-38,-41,-44,-43,]),'BIGGER':([45,],[64,]),'LESS':([45,],[65,]),'EQUALS':([45,],[66,]),'DIFER':([45,],[67,]),'SENAO':([84,],[92,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'arnaldo':([0,],[1,]),'programa':([0,],[2,]),'declaracoes':([3,],[4,]),'empty':([3,4,22,28,44,46,50,62,68,86,93,95,99,],[5,10,33,33,63,63,33,10,10,94,98,63,10,]),'funcao':([4,],[7,]),'listaAfirm':([4,62,68,99,],[8,79,79,79,]),'afirmacao':([8,79,97,],[11,11,101,]),'enquanto':([8,79,97,],[12,12,12,]),'caso':([8,79,97,],[13,13,13,]),'imprimir':([8,79,97,],[14,14,14,]),'chama':([15,43,],[20,61,]),'atribui':([15,],[21,]),'expressao':([16,17,],[24,26,]),'listaVar':([22,28,50,],[31,48,71,]),'ladoDir':([23,27,40,64,65,66,67,105,],[34,47,58,80,81,82,83,106,]),'scan':([23,],[35,]),'termo':([23,27,40,51,52,64,65,66,67,105,],[36,36,36,72,73,36,36,36,36,36,]),'fator':([23,27,40,51,52,59,60,64,65,66,67,105,],[41,41,41,41,41,76,77,41,41,41,41,41,]),'declaracoes_sem_func':([44,46,95,],[62,68,99,]),'declaracoes_para_func':([86,],[93,]),'listaAfirmFunc':([93,],[97,]),'afirmacaoFunc':([97,],[100,]),'retornar':([97,],[102,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> arnaldo","S'",1,None,None,None),
  ('arnaldo -> programa','arnaldo',1,'p_arnaldo','compiler_parser.py',8),
  ('programa -> ABRE_CHAVES declaracoes FECHA_CHAVES','programa',3,'p_programa','compiler_parser.py',21),
  ('declaracoes -> declaracoes funcao','declaracoes',2,'p_declaracoes','compiler_parser.py',29),
  ('declaracoes -> declaracoes listaAfirm','declaracoes',2,'p_declaracoes','compiler_parser.py',30),
  ('declaracoes -> empty','declaracoes',1,'p_declaracoes','compiler_parser.py',31),
  ('declaracoes_sem_func -> declaracoes_sem_func listaAfirm','declaracoes_sem_func',2,'p_declaracoesSemFunc','compiler_parser.py',47),
  ('declaracoes_sem_func -> empty','declaracoes_sem_func',1,'p_declaracoesSemFunc','compiler_parser.py',48),
  ('declaracoes_para_func -> declaracoes_para_func listaAfirmFunc','declaracoes_para_func',2,'p_declaroesParaFunc','compiler_parser.py',62),
  ('declaracoes_para_func -> empty','declaracoes_para_func',1,'p_declaroesParaFunc','compiler_parser.py',63),
  ('funcao -> FUNCAO ID ABRE_PAREN listaVar FECHA_PAREN ABRE_CHAVES declaracoes_para_func FECHA_CHAVES','funcao',8,'p_funcao','compiler_parser.py',79),
  ('chama -> ABRE_PAREN listaVar FECHA_PAREN','chama',3,'p_chama','compiler_parser.py',87),
  ('listaVar -> ID','listaVar',1,'p_listaVar_single','compiler_parser.py',93),
  ('listaVar -> empty','listaVar',1,'p_listaVar_single','compiler_parser.py',94),
  ('listaVar -> ID VIRG listaVar','listaVar',3,'p_listaVar_list','compiler_parser.py',102),
  ('listaAfirm -> listaAfirm afirmacao','listaAfirm',2,'p_listaAfirm','compiler_parser.py',108),
  ('listaAfirm -> empty','listaAfirm',1,'p_listaAfirm','compiler_parser.py',109),
  ('listaAfirmFunc -> listaAfirmFunc afirmacaoFunc','listaAfirmFunc',2,'p_listaAfirmFun','compiler_parser.py',124),
  ('listaAfirmFunc -> empty','listaAfirmFunc',1,'p_listaAfirmFun','compiler_parser.py',125),
  ('afirmacao -> enquanto','afirmacao',1,'p_afirmacao','compiler_parser.py',140),
  ('afirmacao -> caso','afirmacao',1,'p_afirmacao','compiler_parser.py',141),
  ('afirmacao -> imprimir','afirmacao',1,'p_afirmacao','compiler_parser.py',142),
  ('afirmacaoFunc -> afirmacao','afirmacaoFunc',1,'p_afirmacaoFunc','compiler_parser.py',149),
  ('afirmacaoFunc -> retornar','afirmacaoFunc',1,'p_afirmacaoFunc','compiler_parser.py',150),
  ('afirmacao -> ID chama PONTO_VIRG','afirmacao',3,'p_afirmacao_chama','compiler_parser.py',158),
  ('afirmacao -> ID atribui PONTO_VIRG','afirmacao',3,'p_afirmacao_atribui','compiler_parser.py',164),
  ('atribui -> ATRI ladoDir','atribui',2,'p_atribui','compiler_parser.py',171),
  ('atribui -> ATRI scan','atribui',2,'p_atribui','compiler_parser.py',172),
  ('scan -> SCAN ABRE_PAREN FECHA_PAREN','scan',3,'p_scan','compiler_parser.py',178),
  ('imprimir -> IMPRIMIR ABRE_PAREN ladoDir FECHA_PAREN PONTO_VIRG','imprimir',5,'p_imprimir','compiler_parser.py',184),
  ('ladoDir -> termo ADI termo','ladoDir',3,'p_ladoDir','compiler_parser.py',190),
  ('ladoDir -> termo SUB termo','ladoDir',3,'p_ladoDir','compiler_parser.py',191),
  ('ladoDir -> termo','ladoDir',1,'p_ladoDir','compiler_parser.py',192),
  ('retornar -> RETORNAR ABRE_PAREN ladoDir FECHA_PAREN PONTO_VIRG','retornar',5,'p_retornar','compiler_parser.py',201),
  ('termo -> fator','termo',1,'p_termo','compiler_parser.py',207),
  ('termo -> fator MULT fator','termo',3,'p_termo','compiler_parser.py',208),
  ('termo -> fator DIV fator','termo',3,'p_termo','compiler_parser.py',209),
  ('fator -> ADI NUMERO','fator',2,'p_fator_num','compiler_parser.py',218),
  ('fator -> SUB NUMERO','fator',2,'p_fator_num','compiler_parser.py',219),
  ('fator -> NUMERO','fator',1,'p_fator_num','compiler_parser.py',220),
  ('fator -> ADI ID','fator',2,'p_fato_id','compiler_parser.py',229),
  ('fator -> SUB ID','fator',2,'p_fato_id','compiler_parser.py',230),
  ('fator -> ID','fator',1,'p_fato_id','compiler_parser.py',231),
  ('fator -> ABRE_PAREN ladoDir FECHA_PAREN PONTO_VIRG','fator',4,'p_fator_ladoDir','compiler_parser.py',240),
  ('fator -> ID chama','fator',2,'p_fator_chama','compiler_parser.py',246),
  ('enquanto -> ENQUANTO expressao ABRE_CHAVES declaracoes_sem_func FECHA_CHAVES','enquanto',5,'p_enquanto','compiler_parser.py',252),
  ('caso -> CASO expressao ABRE_CHAVES declaracoes_sem_func FECHA_CHAVES','caso',5,'p_caso','compiler_parser.py',258),
  ('caso -> CASO expressao ABRE_CHAVES declaracoes_sem_func FECHA_CHAVES SENAO ABRE_CHAVES declaracoes_sem_func FECHA_CHAVES','caso',9,'p_caso_senao','compiler_parser.py',265),
  ('expressao -> ABRE_PAREN ID BIGGER ladoDir FECHA_PAREN','expressao',5,'p_expressao','compiler_parser.py',271),
  ('expressao -> ABRE_PAREN ID LESS ladoDir FECHA_PAREN','expressao',5,'p_expressao','compiler_parser.py',272),
  ('expressao -> ABRE_PAREN ID EQUALS ladoDir FECHA_PAREN','expressao',5,'p_expressao','compiler_parser.py',273),
  ('expressao -> ABRE_PAREN ID DIFER ladoDir FECHA_PAREN','expressao',5,'p_expressao','compiler_parser.py',274),
  ('empty -> <empty>','empty',0,'p_empty','compiler_parser.py',285),
]
